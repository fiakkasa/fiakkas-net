@inherits TestContext

@code {

    [Fact]
    public void Content_Flow_Should_Render_Custom_Loading_When_IsLoading_Is_True_And_CustomLoading_Is_Set()
    {
        var cut = Render(@<ContentFlow IsLoading="true">
                <CustomLoadingContent>
                    <div class="custom-loading-content"></div>
                </CustomLoadingContent>
            </ContentFlow>
        );

        cut.Find("div.custom-loading-content");
    }

    [Fact]
    public void Content_Flow_Should_Render_Default_Loading_When_IsLoading_Is_True_And_CustomLoading_Is_Null()
    {
        ComponentFactories.AddStub<Skeleton>(@<div class="default-loading"></div>);

        var cut = Render(@<ContentFlow IsLoading="true"/>);

        cut.Find("div.default-loading");
    }

    [Fact]
    public void Content_Flow_Should_Render_Default_Loading_With_Css_Class_When_IsLoading_Is_True_And_CustomLoading_Is_Null()
    {
        ComponentFactories.AddStub<Skeleton>(parameters =>
            @<div class="@parameters.Get(x => x.CssClass)"></div>
        );

        var cut = Render(@<ContentFlow IsLoading="true" GenericLoadingCssClass="custom-loading"/>);

        cut.Find("div.custom-loading");
    }

    [Fact]
    public void Content_Flow_Should_Render_Custom_Error_When_HasError_Is_True_And_CustomErrorContent_Is_Set()
    {
        ComponentFactories.AddStub<GenericError>(_ =>
            @<div class="custom-error-content"></div>
        );

        var cut =
            Render(@<ContentFlow HasError="true"
                                 GenericErrorMessage="Error Message"
                                 GenericErrorCssClass="custom-error">
                    <CustomErrorContent>
                        <div class="custom-error-content"></div>
                    </CustomErrorContent>
                </ContentFlow>
            );

        cut.Find("div.custom-error-content");
    }

    [Fact]
    public void Content_Flow_Should_Render_Default_Error_When_HasError_Is_True_And_CustomErrorContent_Is_Null()
    {
        ComponentFactories.AddStub<GenericError>(@<div class="default-error"></div>);

        var cut = Render(@<ContentFlow HasError="true"/>);

        cut.Find("div.default-error");
    }

    [Fact]
    public void Content_Flow_Should_Render_Default_Error_With_Message_When_HasError_Is_True_And_CustomErrorContent_Is_Null()
    {
        ComponentFactories.AddStub<GenericError>(parameters =>
            @<div class="default-error">
                @parameters.Get(x => x.Message)
            </div>
        );

        var cut = Render(@<ContentFlow HasError="true" GenericErrorMessage="Error Message"/>);

        var result = cut.Find("div.default-error");

        result.MarkupMatches(@<div class="default-error">
                Error Message
            </div>
        );
    }

    [Fact]
    public void Content_Flow_Should_Render_Default_Error_With_Message_And_Css_Class_When_HasError_Is_True_And_CustomErrorContent_Is_Null()
    {
        ComponentFactories.AddStub<GenericError>(parameters =>
            @<div class="@parameters.Get(x => x.CssClass)">
                @parameters.Get(x => x.Message)
            </div>
        );

        var cut =
            Render(@<ContentFlow HasError="true"
                                 GenericErrorMessage="Error Message"
                                 GenericErrorCssClass="custom-error"/>
            );

        var result = cut.Find("div.custom-error");

        result.MarkupMatches(@<div class="custom-error">
                Error Message
            </div>
        );
    }

    [Fact]
    public void Content_Flow_Should_Render_Default_Error_With_Message_Css_Class_And_GenericErrorContent_When_HasError_Is_True_And_GenericErrorContent_Is_Set()
    {
        ComponentFactories.AddStub<GenericError>(parameters =>
            @<div class="@parameters.Get(x => x.CssClass)">
                @parameters.Get(x => x.Message)
                @parameters.Get(x => x.ChildContent)
            </div>
        );

        var cut =
            Render(@<ContentFlow HasError="true"
                                 GenericErrorMessage="Error Message"
                                 GenericErrorCssClass="custom-error">
                    <GenericErrorContent>
                        <a href="">Extra!</a>
                    </GenericErrorContent>
                </ContentFlow>
            );

        var result = cut.Find("div.custom-error");

        result.MarkupMatches(@<div class="custom-error">
                Error Message
                <a href="">Extra!</a>
            </div>
        );
    }

    [Fact]
    public void Content_Flow_Should_Render_Content_When_HasData_Is_True_And_Content_Is_Set()
    {
        var cut =
            Render(@<text>
                        <ContentFlow HasData="true">
                            <div class="content"></div>
                        </ContentFlow>
                        <ContentFlow HasData="true">
                            <ChildContent>
                                <div class="content"></div>
                            </ChildContent>
                        </ContentFlow>
                    </text>
            );

        var result = cut.FindAll("div.content");

        Assert.Equal(2, result.Count);
    }

    [Fact]
    public void Content_Flow_Should_Render_Content_When_HasData_Is_True_And_Content_Is_Null()
    {
        var cut = Render(@<ContentFlow HasData="true"></ContentFlow>);

        var result = cut.Markup;

        Assert.Equal(string.Empty, result);
    }

    [Fact]
    public void Content_Flow_Should_Render_CustomNoDataContent_When_All_Flags_Are_False_And_CustomNoDataContent_Is_Set()
    {
        var cut =
            Render(@<ContentFlow>
                    <CustomNoDataContent>
                        <div class="no-data"></div>
                    </CustomNoDataContent>
                </ContentFlow>
            );

        cut.Find("div.no-data");
    }

    [Fact]
    public void Content_Flow_Should_Render_Default_No_Data_When_All_Flags_Are_False_And_CustomNoDataContent_Is_Null()
    {
        ComponentFactories.AddStub<GenericNoData>(@<div class="default-no-data"></div>);

        var cut = Render(@<ContentFlow/>);

        cut.Find("div.default-no-data");
    }

    [Fact]
    public void Content_Flow_Should_Render_Default_No_Data_With_Message_When_All_Flags_Are_False_And_CustomNoDataContent_Is_Null()
    {
        ComponentFactories.AddStub<GenericNoData>(parameters =>
            @<div class="default-no-data">
                @parameters.Get(x => x.Message)
            </div>
        );

        var cut = Render(@<ContentFlow GenericNoDataMessage="No Data"/>);

        var result = cut.Find("div.default-no-data");

        result.MarkupMatches(@<div class="default-no-data">
                No Data
            </div>
        );
    }

    [Fact]
    public void Content_Flow_Should_Render_Default_No_Data_With_Message_And_Css_Class_When_All_Flags_Are_False_And_CustomNoDataContent_Is_Null()
    {
        ComponentFactories.AddStub<GenericNoData>(parameters =>
            @<div class="@parameters.Get(x => x.CssClass)">
                @parameters.Get(x => x.Message)
            </div>
        );

        var cut = Render(@<ContentFlow GenericNoDataMessage="No Data" GenericNoDataCssClass="custom-no-data"/>);

        var result = cut.Find("div.custom-no-data");

        result.MarkupMatches(@<div class="custom-no-data">
                No Data
            </div>
        );
    }

    [Fact]
    public void Content_Flow_Should_Render_Default_No_Data_With_Message_Css_Class_And_CustomNoDataContent_When_All_Flags_Are_False_And_CustomNoDataContent_Is_Set()
    {
        ComponentFactories.AddStub<GenericNoData>(parameters =>
            @<div class="@parameters.Get(x => x.CssClass)">
                @parameters.Get(x => x.Message)
                @parameters.Get(x => x.ChildContent)
            </div>
        );

        var cut =
            Render(@<ContentFlow GenericNoDataMessage="No Data"
                                 GenericNoDataCssClass="custom-no-data">
                    <GenericNoDataContent>
                        <a href="">Extra!</a>
                    </GenericNoDataContent>
                </ContentFlow>
            );

        var result = cut.Find("div.custom-no-data");

        result.MarkupMatches(@<div class="custom-no-data">
                No Data
                <a href="">Extra!</a>
            </div>
        );
    }

}
