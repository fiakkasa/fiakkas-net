@inherits TestContext

@code {
    private static readonly DateTimeOffset _date = new(2024, 1, 1, 0, 0, 0, TimeSpan.Zero);
    private readonly IFiakkasNetApi _api = Substitute.For<IFiakkasNetApi>();
    private readonly IOperationResult<IGetPortfolioItemsResult> _apiResult = Substitute.For<IOperationResult<IGetPortfolioItemsResult>>();
    private readonly IAppCache _cache = Substitute.For<IAppCache>();
    private readonly ILogger<Portfolio> _logger = Substitute.For<ILogger<Portfolio>>();

    public PortfolioTests()
    {
        _apiResult.Data.Returns(default(IGetPortfolioItemsResult?));
        Services.AddSingleton(_api);
        Services.AddSingleton(_cache);
        Services.AddSingleton(_logger);
    }

    private Task<IOperationResult<IGetPortfolioItemsResult>> GetMethodCall() =>
        _api
            .GetPortfolioItems
            .ExecuteAsync(
                Arg.Any<PortfolioItemFilterInput?>(),
                Arg.Any<IReadOnlyList<PortfolioItemSortInput>?>(),
                Arg.Any<int?>(),
                Arg.Any<int?>(),
                Arg.Any<string?>(),
                Arg.Any<string?>(),
                Arg.Any<CancellationToken>()
            );

    private static GetPortfolioItemsResult DataFactory(
        int start = 0,
        int count = 50,
        int totalCount = 50,
        bool hasNextPage = false
    ) =>
        new(
            new GetPortfolioItems_PortfolioItems_PortfolioItemsConnection(
                totalCount,
                new GetPortfolioItems_PortfolioItems_PageInfo_PageInfo(
                    hasNextPage,
                    start > 0,
                    $"start-cursor-{start}",
                    $"end-cursor-{start + count}"
                ),
                Enumerable
                    .Range(start, count)
                    .Select((i, index) =>
                        new GetPortfolioItems_PortfolioItems_Nodes_PortfolioItem(
                            _date,
                            i switch
                            {
                                // case: uri present
                                > 2 => new Uri($"/portfolio-item-{i}", UriKind.Relative),
                                _ => null
                            },
                            $"portfolio-item-id-{i}",
                            i switch
                            {
                                // case: tech items present
                                // match: tech items collection
                                > 3 => string.Join(
                                    ", ",
                                    $"Information-Technology-Category-Title-{i}",
                                    $"Software-Development-Category-Title-{i}",
                                    $"Unknown-Technology-Category-Title-{i}"),
                                _ => string.Empty
                            },
                            $"Portfolio-Item-Title-{i}",
                            null,
                            0,
                            2024,
                            i switch
                            {
                                // case: category is resolved
                                > 0 => new GetPortfolioItems_PortfolioItems_Nodes_Category_PortfolioCategory(
                                    _date,
                                    $"category-id-{i}",
                                    i switch
                                    {
                                        // mimic 2 categories
                                        > 1 => $"Category-Title-{i % 2}",
                                        _ => string.Empty
                                    },
                                    null,
                                    0
                                ),
                                _ => null
                            },
                            i switch
                            {
                                // case: customer is resolved
                                > 2 => new GetPortfolioItems_PortfolioItems_Nodes_Customer_Customer(
                                    _date,
                                    i switch
                                    {
                                        // case: uri present
                                        > 4 => new Uri($"/customer-{i}", UriKind.Relative),
                                        _ => null
                                    },
                                    $"customer-id-{i}",
                                    i switch
                                    {
                                        // case: title present
                                        > 3 => $"Customer-Title-{i}",
                                        _ => string.Empty
                                    },
                                    null,
                                    0
                                ),
                                _ => null
                            },
                            i switch
                            {
                                // case: tech items collection present
                                > 3 => new GetPortfolioItems_PortfolioItems_Nodes_TechnologyCategories_TechnologyCategoriesConnection(
                                    3,
                                    [
                                        new GetPortfolioItems_PortfolioItems_Nodes_TechnologyCategories_Nodes_InformationTechnologyCategory(
                                            _date,
                                            new Uri($"/information-technology-category-{i}", UriKind.Relative),
                                            $"/information-technology-category-id-{i}",
                                            $"Information-Technology-Category-Title-{i}",
                                            null,
                                            0
                                        ),
                                        new GetPortfolioItems_PortfolioItems_Nodes_TechnologyCategories_Nodes_SoftwareDevelopmentCategory(
                                            _date,
                                            new Uri($"/software-development-category-{i}", UriKind.Relative),
                                            $"/software-development-category-id-{i}",
                                            $"Software-Development-Category-Title-{i}",
                                            null,
                                            0
                                        ),
                                        new GetPortfolioItems_PortfolioItems_Nodes_TechnologyCategories_Nodes_UnknownTechnologyCategory(
                                            _date,
                                            new Uri($"/unknown-technology-category-{i}", UriKind.Relative),
                                            $"/unknown-technology-category-id-{i}",
                                            $"Unknown-Technology-Category-Title-{i}",
                                            null,
                                            0
                                        )
                                    ]
                                ),
                                _ => null
                            }
                        )
                    )
                    .ToArray()
            )
        );

    [Fact]
    public void Portfolio_Should_Render_Template_When_Cached_Data_Is_Present()
    {
        var data = DataFactory();
        _apiResult.Data.Returns(data);

        GetMethodCall().Returns(Task.FromResult(_apiResult));

        var firstRenderCut = RenderComponent<Portfolio>();
        var firstRenderModel = firstRenderCut.Instance.Model;

        _cache
            .TryGetValue(
                Arg.Any<string>(),
                out Arg.Any<HashSet<IGetPortfolioItems_PortfolioItems_Nodes>>()
            )
            .Returns(x =>
            {
                x[1] = firstRenderModel;
                return true;
            });

        _apiResult.Data.ReturnsNull();

        var cut = RenderComponent<Portfolio>();

        cut.WaitForAssertion(() => cut.Find(".year-section"));

        cut.Markup.MatchSnapshot();

        cut.Markup.MarkupMatches(firstRenderCut);
    }

    [Fact]
    public void Portfolio_Should_Render_Template_When_Data_Is_Present()
    {
        var taskSource = new TaskCompletionSource<IOperationResult<IGetPortfolioItemsResult>>();
        var initialDataBatch = DataFactory(0, 50, 100, true);
        var secondDataBatch = DataFactory(50, 50, 100, false);
        var apiResultInitial = Substitute.For<IOperationResult<IGetPortfolioItemsResult>>();
        var apiResultSecond = Substitute.For<IOperationResult<IGetPortfolioItemsResult>>();

        apiResultInitial.Data.Returns(initialDataBatch);
        apiResultSecond.Data.Returns(secondDataBatch);

        GetMethodCall()
            .Returns(
                Task.FromResult(apiResultInitial),
                taskSource.Task
            );

        var cut = RenderComponent<Portfolio>();

        cut.WaitForAssertion(() =>
        {
            cut.FindComponent<Skeleton>();

            Assert.True(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        taskSource.SetResult(apiResultSecond);

        cut.WaitForAssertion(() =>
        {
            cut.FindComponent<Skeleton>();
            Assert.False(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        cut.WaitForAssertion(() =>
        {
            cut.Find(".year-section");
            Assert.False(cut.Instance.InitialLoading);
            Assert.False(cut.Instance.PartialLoading);
        });

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Portfolio_Should_Render_Template_With_Data_Permitted_By_Limit_When_Data_Is_Present()
    {
        var operations =
            Enumerable
                .Range(0, 10)
                .Select((_, i) =>
                    {
                        var operation = Substitute.For<IOperationResult<IGetPortfolioItemsResult>>();
                        operation.Data.Returns(DataFactory(i * 50, 50, 173, true));

                        return operation;
                    }
                )
                .ToArray();
        GetMethodCall()
            .Returns(
                operations[0],
                operations.Skip(1).ToArray()
            );

        var cut = RenderComponent<Portfolio>();

        cut.WaitForAssertion(() =>
        {
            cut.FindComponent<Skeleton>();
            Assert.True(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        cut.WaitForAssertion(() =>
        {
            cut.FindComponent<Skeleton>();
            Assert.False(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        cut.WaitForAssertion(() =>
        {
            cut.Find(".year-section");
            Assert.False(cut.Instance.InitialLoading);
            Assert.False(cut.Instance.PartialLoading);
        });

        Assert.True(cut.Instance.Model.Count <= 200);

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Portfolio_Should_Render_Template_With_Acquired_Data_When_One_Subsequent_Batch_Of_Data_Does_Not_Meet_Criteria()
    {
        var operations =
            Enumerable
                .Range(0, 3)
                .Select((_, i) =>
                    {
                        var operation = Substitute.For<IOperationResult<IGetPortfolioItemsResult>>();

                        if (i < 2)
                        {
                            operation.Data.Returns(DataFactory(i * 50, 50, 100, true));
                        }

                        return operation;
                    }
                )
                .ToArray();
        GetMethodCall()
            .Returns(
                operations[0],
                operations.Skip(1).ToArray()
            );

        var cut = RenderComponent<Portfolio>();

        cut.WaitForAssertion(() =>
        {
            cut.FindComponent<Skeleton>();
            Assert.True(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        cut.WaitForAssertion(() =>
        {
            cut.FindComponent<Skeleton>();
            Assert.False(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        cut.WaitForAssertion(() =>
        {
            cut.Find(".year-section");
            Assert.False(cut.Instance.InitialLoading);
            Assert.False(cut.Instance.PartialLoading);
        });

        Assert.True(cut.Instance.Model.Count <= 100);

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Portfolio_Should_Render_Initial_Loading_When_Data_Is_In_Transit()
    {
        var taskSource = new TaskCompletionSource<IOperationResult<IGetPortfolioItemsResult>>();
        GetMethodCall().Returns(taskSource.Task);

        var cut = RenderComponent<Portfolio>();

        cut.WaitForAssertion(() =>
        {
            cut.FindComponent<Skeleton>();
            Assert.True(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        cut.Markup.MatchSnapshot();

        taskSource.SetResult(_apiResult);
    }

    [Fact]
    public void Portfolio_Should_Render_Partial_Loading_When_Data_Is_In_Transit()
    {
        var taskSource = new TaskCompletionSource<IOperationResult<IGetPortfolioItemsResult>>();
        var initialDataBatch = DataFactory(0, 50, 100, true);
        var secondDataBatch = DataFactory(50, 50, 100, false);
        var apiResultInitial = Substitute.For<IOperationResult<IGetPortfolioItemsResult>>();
        var apiResultSecond = Substitute.For<IOperationResult<IGetPortfolioItemsResult>>();

        apiResultInitial.Data.Returns(initialDataBatch);
        apiResultSecond.Data.Returns(secondDataBatch);

        GetMethodCall()
            .Returns(
                Task.FromResult(apiResultInitial),
                taskSource.Task
            );

        var cut = RenderComponent<Portfolio>();

        cut.WaitForAssertion(() =>
        {
            cut.FindComponent<Skeleton>();
            Assert.True(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        taskSource.SetResult(apiResultSecond);

        cut.WaitForAssertion(() =>
        {
            cut.FindComponent<Skeleton>();
            Assert.False(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Portfolio_Should_Prevent_Refresh_When_Loading()
    {
        var taskSource = new TaskCompletionSource<IOperationResult<IGetPortfolioItemsResult>>();
        var data = DataFactory(0, 50, 100, false);
        var apiResultInitial = Substitute.For<IOperationResult<IGetPortfolioItemsResult>>();
        var apiResultSecond = Substitute.For<IOperationResult<IGetPortfolioItemsResult>>();

        apiResultInitial.Data.Returns(data);
        apiResultSecond.Data.Returns(data);

        GetMethodCall()
            .Returns(
                Task.FromResult(apiResultInitial),
                taskSource.Task
            );

        var cut = RenderComponent<Portfolio>();
        var refreshButton = cut.Find("button");

        cut.WaitForAssertion(() =>
        {
            Assert.NotNull(refreshButton.GetAttribute("disabled"));
            Assert.True(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        cut.WaitForAssertion(() =>
        {
            Assert.Null(refreshButton.GetAttribute("disabled"));
            Assert.False(cut.Instance.InitialLoading);
            Assert.False(cut.Instance.PartialLoading);
        });

        refreshButton.Click();

        cut.WaitForAssertion(() =>
        {
            Assert.NotNull(refreshButton.GetAttribute("disabled"));
            Assert.True(cut.Instance.InitialLoading);
            Assert.True(cut.Instance.PartialLoading);
        });

        refreshButton.RemoveAttribute("disabled");
        refreshButton.Click();

        taskSource.SetResult(apiResultSecond);

        cut.WaitForAssertion(() =>
        {
            Assert.Null(refreshButton.GetAttribute("disabled"));
            Assert.False(cut.Instance.InitialLoading);
            Assert.False(cut.Instance.PartialLoading);
        });

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Portfolio_Should_Allow_Refresh_When_Not_Loading()
    {
        var taskSource = new TaskCompletionSource<IOperationResult<IGetPortfolioItemsResult>>();
        GetMethodCall()
            .Returns(
                Task.FromResult(_apiResult),
                taskSource.Task
            );

        var cut = RenderComponent<Portfolio>();
        var refreshButton = cut.Find("button");

        cut.WaitForAssertion(() =>
        {
            Assert.Null(refreshButton.GetAttribute("disabled"));
            Assert.False(cut.Instance.PartialLoading);
        });

        refreshButton.Click();

        cut.WaitForAssertion(() =>
        {
            var disabled = refreshButton.GetAttribute("disabled");
            Assert.NotNull(disabled);
            Assert.Empty(disabled);
            Assert.True(cut.Instance.PartialLoading);
        });

        taskSource.SetResult(_apiResult);

        cut.WaitForAssertion(() =>
        {
            Assert.Null(refreshButton.GetAttribute("disabled"));
            Assert.False(cut.Instance.PartialLoading);
        });

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Portfolio_Should_Render_GenericNodata_When_Data_Is_Not_Present()
    {
        GetMethodCall().Returns(Task.FromResult(_apiResult));

        var cut = RenderComponent<Portfolio>();

        cut.WaitForAssertion(() => cut.FindComponent<GenericNoData>());

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Portfolio_Should_Render_GenericNodata_When_PortfolioItems_Is_Null()
    {
        _apiResult.Data.Returns(new GetPortfolioItemsResult(null));
        GetMethodCall().Returns(Task.FromResult(_apiResult));

        var cut = RenderComponent<Portfolio>();

        cut.WaitForAssertion(() => cut.FindComponent<GenericNoData>());

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Portfolio_Should_Render_GenericNodata_When_Nodes_Is_Null()
    {
        _apiResult.Data.Returns(
            new GetPortfolioItemsResult(
                new GetPortfolioItems_PortfolioItems_PortfolioItemsConnection(
                    0,
                    new GetPortfolioItems_PortfolioItems_PageInfo_PageInfo(false, false, null, null),
                    null
                )
            )
        );
        GetMethodCall().Returns(Task.FromResult(_apiResult));

        var cut = RenderComponent<Portfolio>();

        cut.WaitForAssertion(() => cut.FindComponent<GenericNoData>());

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Portfolio_Should_Render_GenericError_When_Error()
    {
        GetMethodCall().ThrowsAsync(new Exception("Splash!"));

        var cut = RenderComponent<Portfolio>();

        cut.WaitForAssertion(() => cut.FindComponent<GenericError>());

        cut.Markup.MatchSnapshot();
    }

}
