@using Polly
@using Polly.Retry
@using System.Globalization
@using ui.Models
@inherits TestContext

@code {
    private static readonly DateTimeOffset _date = new(2024, 1, 1, 0, 0, 0, TimeSpan.Zero);
    private readonly IFiakkasNetApi _api = Substitute.For<IFiakkasNetApi>();
    private readonly IOperationResult<IGetSystemStatusResult> _apiResult = Substitute.For<IOperationResult<IGetSystemStatusResult>>();
    private readonly ILogger<ApiStatus> _logger = Substitute.For<ILogger<ApiStatus>>();

    private static readonly FiakkasNetApiConfig _fiakkasNetApiConfig = new()
    {
        Delay = TimeSpan.FromMilliseconds(1),
        DelayBackoffType = DelayBackoffType.Linear,
        UseJitter = false,
        MaxRetryAttempts = 1
    };

    private static readonly RetryStrategyOptions _waitAndRetryOptionsPolicy = new()
    {
        ShouldHandle = new PredicateBuilder().Handle<Exception>(),
        BackoffType = _fiakkasNetApiConfig.DelayBackoffType,
        UseJitter = _fiakkasNetApiConfig.UseJitter,
        MaxRetryAttempts = _fiakkasNetApiConfig.MaxRetryAttempts,
        Delay = _fiakkasNetApiConfig.Delay
    };

    public ApiStatusTests()
    {
        Thread.CurrentThread.CurrentCulture = new CultureInfo("en-US");
        Thread.CurrentThread.CurrentUICulture = new CultureInfo("en-US");

        ComponentFactories.AddStub<PageTitle>();
        _apiResult.Data.Returns(default(IGetSystemStatusResult?));
        Services.AddSingleton(_api);
        Services.AddSingleton(_logger);
        Services.AddResiliencePipeline(
            nameof(FiakkasNetApi),
            builder => builder.AddRetry(_waitAndRetryOptionsPolicy)
        );
    }

    private Task<IOperationResult<IGetSystemStatusResult>> GetMethodCall() =>
        _api
            .GetSystemStatus
            .ExecuteAsync(Arg.Any<CancellationToken>());

    private GetSystemStatusResult DataFactory(bool includeHealthEntries = false) =>
        new(
            new GetSystemStatus_SystemStatus_SystemInfoItem(
                _date,
                TimeSpan.FromMinutes(1),
                "1.0.0",
                new GetSystemStatus_SystemStatus_Health_HealthReportSummary(
                    HealthStatus.Healthy,
                    TimeSpan.FromSeconds(30),
                    includeHealthEntries switch
                    {
                        true =>
                        [
                            new GetSystemStatus_SystemStatus_Health_Entries_KeyValuePairOfStringAndHealthReportItem(
                                "Service",
                                new GetSystemStatus_SystemStatus_Health_Entries_Value_HealthReportItem(
                                    "Description",
                                    TimeSpan.FromSeconds(30),
                                    HealthStatus.Healthy,
                                    null
                                )
                            )
                        ],
                        _ => null
                    }
                )
            )
        );

    [Fact]
    public void Api_Status_Should_Render_Template_When_Data_Is_Present()
    {
        var taskSource = new TaskCompletionSource<IOperationResult<IGetSystemStatusResult>>();
        var data = DataFactory(true);
        _apiResult.Data.Returns(data);
        GetMethodCall().Returns(taskSource.Task);

        var cut = RenderComponent<ApiStatus>();

        cut.WaitForAssertion(() => cut.FindComponent<Skeleton>());

        taskSource.SetResult(_apiResult);

        cut.WaitForAssertion(() => cut.Find("table.table"));

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Api_Status_Should_Render_Template_When_Data_Is_Present_With_No_Health_Entries()
    {
        var taskSource = new TaskCompletionSource<IOperationResult<IGetSystemStatusResult>>();
        var data = DataFactory(false);
        _apiResult.Data.Returns(data);
        GetMethodCall().Returns(taskSource.Task);

        var cut = RenderComponent<ApiStatus>();

        cut.WaitForAssertion(() => cut.FindComponent<Skeleton>());

        taskSource.SetResult(_apiResult);

        cut.WaitForAssertion(() => cut.Find("table.table"));

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Api_Status_Should_Render_Loading_When_Data_Is_In_Transit()
    {
        var taskSource = new TaskCompletionSource<IOperationResult<IGetSystemStatusResult>>();
        GetMethodCall().Returns(taskSource.Task);

        var cut = RenderComponent<ApiStatus>();

        cut.WaitForAssertion(() => cut.FindComponent<Skeleton>());

        cut.Markup.MatchSnapshot();

        taskSource.SetResult(_apiResult);
    }

    [Fact]
    public void Api_Status_Should_Prevent_Refresh_When_Loading()
    {
        var taskSource = new TaskCompletionSource<IOperationResult<IGetSystemStatusResult>>();
        GetMethodCall()
            .Returns(
                Task.FromResult(_apiResult),
                taskSource.Task
            );

        var cut = RenderComponent<ApiStatus>();
        var refreshButton = cut.Find("button");

        cut.WaitForAssertion(() =>
        {
            Assert.Null(refreshButton.GetAttribute("disabled"));
            Assert.False(cut.Instance.Loading);
        });

        refreshButton.Click();

        cut.WaitForAssertion(() =>
        {
            Assert.NotNull(refreshButton.GetAttribute("disabled"));
            Assert.True(cut.Instance.Loading);
        });

        refreshButton.RemoveAttribute("disabled");

        refreshButton.Click();

        cut.WaitForAssertion(() => Assert.True(cut.Instance.Loading));

        cut.Markup.MatchSnapshot();

        taskSource.SetResult(_apiResult);
    }

    [Fact]
    public void Api_Status_Should_Allow_Refresh_When_Not_Loading()
    {
        var taskSourceAfter = new TaskCompletionSource<IOperationResult<IGetSystemStatusResult>>();
        GetMethodCall()
            .Returns(
                Task.FromResult(_apiResult),
                taskSourceAfter.Task
            );

        var cut = RenderComponent<ApiStatus>();
        var refreshButton = cut.Find("button");

        cut.WaitForAssertion(() =>
        {
            Assert.Null(refreshButton.GetAttribute("disabled"));
            Assert.False(cut.Instance.Loading);
        });

        refreshButton.Click();

        cut.WaitForAssertion(() =>
        {
            var disabled = refreshButton.GetAttribute("disabled");
            Assert.NotNull(disabled);
            Assert.Empty(disabled);
            Assert.True(cut.Instance.Loading);
        });

        taskSourceAfter.SetResult(_apiResult);

        cut.WaitForAssertion(() =>
        {
            Assert.Null(refreshButton.GetAttribute("disabled"));
            Assert.False(cut.Instance.Loading);
        });

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Api_Status_Should_Render_GenericNodata_When_Data_Is_Not_Present()
    {
        GetMethodCall().Returns(Task.FromResult(_apiResult));

        var cut = RenderComponent<ApiStatus>();

        cut.WaitForAssertion(() => cut.FindComponent<GenericNoData>());

        cut.Markup.MatchSnapshot();
    }

    [Fact]
    public void Api_Status_Should_Render_GenericError_When_Error()
    {
        GetMethodCall().ThrowsAsync(new Exception("Splash!"));

        var cut = RenderComponent<ApiStatus>();

        cut.WaitForAssertion(() => cut.FindComponent<GenericError>());

        cut.Markup.MatchSnapshot();
    }

}
