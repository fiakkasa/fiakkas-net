schema {
  query: Query
}

interface ICategory {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  title: String!
}

interface ITechnologyCategory {
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  title: String!
  href: URL
}

"A segment of a collection."
type AssociatedCategoriesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [ICategory!]
}

"A segment of a collection."
type CategoriesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [ICategory!]
}

type Category implements ICategory {
  title: String!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
}

"Information about the offset pagination."
type CollectionSegmentInfo {
  "Indicates whether more items exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more items exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
}

"A segment of a collection."
type InformationTechnologyCategoriesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [InformationTechnologyCategory!]
}

type InformationTechnologyCategory implements ICategory & ITechnologyCategory {
  href: URL
  title: String!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
}

"A segment of a collection."
type OtherCategoriesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [OtherCategory!]
}

type OtherCategory implements ICategory {
  title: String!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
}

"A segment of a collection."
type PortfolioCategoriesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [PortfolioCategory!]
}

type PortfolioCategory implements ICategory {
  title: String!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
}

type Query {
  categories(skip: Int take: Int order: [ICategorySortInput!] where: ICategoryFilterInput): CategoriesCollectionSegment
  portfolioCategories(skip: Int take: Int order: [PortfolioCategorySortInput!] where: PortfolioCategoryFilterInput): PortfolioCategoriesCollectionSegment
  resumeCategories(skip: Int take: Int order: [ResumeCategorySortInput!] where: ResumeCategoryFilterInput): ResumeCategoriesCollectionSegment
  softwareDevelopmentCategories(skip: Int take: Int order: [SoftwareDevelopmentCategorySortInput!] where: SoftwareDevelopmentCategoryFilterInput): SoftwareDevelopmentCategoriesCollectionSegment
  informationTechnologyCategories(skip: Int take: Int order: [InformationTechnologyCategorySortInput!] where: InformationTechnologyCategoryFilterInput): InformationTechnologyCategoriesCollectionSegment
  technologyCategories(skip: Int take: Int order: [ITechnologyCategorySortInput!] where: ITechnologyCategoryFilterInput): TechnologyCategoriesCollectionSegment
  otherCategories(skip: Int take: Int order: [OtherCategorySortInput!] where: OtherCategoryFilterInput): OtherCategoriesCollectionSegment
}

"A segment of a collection."
type ResumeCategoriesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [ResumeCategory!]
}

type ResumeCategory implements ICategory {
  associatedCategoryTypes: [CategoryType!]!
  title: String!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  associatedCategories(skip: Int take: Int where: ICategoryFilterInput order: [ICategorySortInput!]): AssociatedCategoriesCollectionSegment
}

"A segment of a collection."
type SoftwareDevelopmentCategoriesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [SoftwareDevelopmentCategory!]
}

type SoftwareDevelopmentCategory implements ICategory & ITechnologyCategory {
  href: URL
  title: String!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
}

"A segment of a collection."
type TechnologyCategoriesCollectionSegment {
  "Information to aid in pagination."
  pageInfo: CollectionSegmentInfo!
  "A flattened list of the items."
  items: [ITechnologyCategory!]
}

type TechnologyCategory implements ICategory & ITechnologyCategory {
  href: URL
  title: String!
  id: UUID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
}

input CategoryTypeOperationFilterInput {
  eq: CategoryType
  neq: CategoryType
  in: [CategoryType!]
  nin: [CategoryType!]
}

input DateTimeOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ICategoryFilterInput {
  and: [ICategoryFilterInput!]
  or: [ICategoryFilterInput!]
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
  title: StringOperationFilterInput
}

input ICategorySortInput {
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  version: SortEnumType
  title: SortEnumType
}

input ITechnologyCategoryFilterInput {
  and: [ITechnologyCategoryFilterInput!]
  or: [ITechnologyCategoryFilterInput!]
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
  title: StringOperationFilterInput
  href: UrlOperationFilterInput
}

input ITechnologyCategorySortInput {
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  version: SortEnumType
  title: SortEnumType
  href: UriSortInput
}

input InformationTechnologyCategoryFilterInput {
  and: [InformationTechnologyCategoryFilterInput!]
  or: [InformationTechnologyCategoryFilterInput!]
  href: UrlOperationFilterInput
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input InformationTechnologyCategorySortInput {
  href: UriSortInput
  title: SortEnumType
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  version: SortEnumType
}

input ListCategoryTypeOperationFilterInput {
  all: CategoryTypeOperationFilterInput
  none: CategoryTypeOperationFilterInput
  some: CategoryTypeOperationFilterInput
  any: Boolean
}

input LongOperationFilterInput {
  eq: Long
  neq: Long
  in: [Long]
  nin: [Long]
  gt: Long
  ngt: Long
  gte: Long
  ngte: Long
  lt: Long
  nlt: Long
  lte: Long
  nlte: Long
}

input OtherCategoryFilterInput {
  and: [OtherCategoryFilterInput!]
  or: [OtherCategoryFilterInput!]
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input OtherCategorySortInput {
  title: SortEnumType
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  version: SortEnumType
}

input PortfolioCategoryFilterInput {
  and: [PortfolioCategoryFilterInput!]
  or: [PortfolioCategoryFilterInput!]
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input PortfolioCategorySortInput {
  title: SortEnumType
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  version: SortEnumType
}

input ResumeCategoryFilterInput {
  and: [ResumeCategoryFilterInput!]
  or: [ResumeCategoryFilterInput!]
  associatedCategoryTypes: ListCategoryTypeOperationFilterInput
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input ResumeCategorySortInput {
  title: SortEnumType
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  version: SortEnumType
}

input SoftwareDevelopmentCategoryFilterInput {
  and: [SoftwareDevelopmentCategoryFilterInput!]
  or: [SoftwareDevelopmentCategoryFilterInput!]
  href: UrlOperationFilterInput
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input SoftwareDevelopmentCategorySortInput {
  href: UriSortInput
  title: SortEnumType
  id: SortEnumType
  createdAt: SortEnumType
  updatedAt: SortEnumType
  version: SortEnumType
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input UriSortInput {
  absolutePath: SortEnumType
  absoluteUri: SortEnumType
  localPath: SortEnumType
  authority: SortEnumType
  hostNameType: SortEnumType
  isDefaultPort: SortEnumType
  isFile: SortEnumType
  isLoopback: SortEnumType
  pathAndQuery: SortEnumType
  isUnc: SortEnumType
  host: SortEnumType
  port: SortEnumType
  query: SortEnumType
  fragment: SortEnumType
  scheme: SortEnumType
  originalString: SortEnumType
  dnsSafeHost: SortEnumType
  idnHost: SortEnumType
  isAbsoluteUri: SortEnumType
  userEscaped: SortEnumType
  userInfo: SortEnumType
}

input UrlOperationFilterInput {
  eq: URL
  neq: URL
  in: [URL]
  nin: [URL]
  gt: URL
  ngt: URL
  gte: URL
  ngte: URL
  lt: URL
  nlt: URL
  lte: URL
  nlte: URL
}

input UuidOperationFilterInput {
  eq: UUID
  neq: UUID
  in: [UUID]
  nin: [UUID]
  gt: UUID
  ngt: UUID
  gte: UUID
  ngte: UUID
  lt: UUID
  nlt: UUID
  lte: UUID
  nlte: UUID
}

enum CategoryType {
  NONE
  PORTFOLIO
  RESUME
  SOFTWARE_DEVELOPMENT
  INFORMATION_TECHNOLOGY
  OTHER
}

enum SortEnumType {
  ASC
  DESC
}

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

scalar URL @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc3986")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
