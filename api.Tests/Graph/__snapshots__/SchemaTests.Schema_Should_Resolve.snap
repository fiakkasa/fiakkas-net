schema {
  query: Query
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

interface PolymorphicCategory {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  title: String!
}

interface PolymorphicTechnologyCategory {
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  title: String!
  href: URL
}

type Achievement implements Node {
  content: String!
  years: [Int!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  yearsSummary: String!
  internalId: UUID!
}

"A connection to a list of items."
type AchievementsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AchievementsEdge!]
  "A flattened list of the nodes."
  nodes: [Achievement!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type AchievementsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Achievement!
}

"A connection to a list of items."
type AssociatedCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AssociatedCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [PolymorphicCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type AssociatedCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PolymorphicCategory!
}

"A connection to a list of items."
type CategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [PolymorphicCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type CategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PolymorphicCategory!
}

type ContactItem implements Node {
  key: String!
  icon: String
  title: String!
  description: String!
  href: URL
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  internalId: UUID!
}

"A connection to a list of items."
type ContactItemsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ContactItemsEdge!]
  "A flattened list of the nodes."
  nodes: [ContactItem!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type ContactItemsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ContactItem!
}

type Customer implements Node {
  title: String!
  href: URL
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  portfolioCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PortfolioCategoryFilterInput @cost(weight: "10") order: [PortfolioCategorySortInput!] @cost(weight: "10")): PortfolioCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PortfolioItemFilterInput @cost(weight: "10") order: [PortfolioItemSortInput!] @cost(weight: "10")): PortfolioItemsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioTechnologyCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: IPolymorphicTechnologyCategoryFilterInput @cost(weight: "10") order: [IPolymorphicTechnologyCategorySortInput!] @cost(weight: "10")): PortfolioTechnologyCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  internalId: UUID!
}

"A connection to a list of items."
type CustomersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [CustomersEdge!]
  "A flattened list of the nodes."
  nodes: [Customer!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type CustomersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Customer!
}

type EducationItem implements Node {
  categoryId: UUID!
  timePeriod: TimePeriod!
  title: String!
  href: URL
  location: String!
  description: String!
  subjects: [String!]!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  category: ResumeCategory @cost(weight: "10")
  internalId: UUID!
}

"A connection to a list of items."
type EducationItemsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [EducationItemsEdge!]
  "A flattened list of the nodes."
  nodes: [EducationItem!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type EducationItemsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: EducationItem!
}

type HealthReportItem {
  description: String
  duration: TimeSpan!
  status: HealthStatus!
  tags: [String!]
}

type HealthReportSummary {
  status: HealthStatus!
  totalDuration: TimeSpan!
  entries: [KeyValuePairOfStringAndHealthReportItem!]
}

"A connection to a list of items."
type InformationTechnologyCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [InformationTechnologyCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [InformationTechnologyCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type InformationTechnologyCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: InformationTechnologyCategory!
}

type InformationTechnologyCategory implements PolymorphicCategory & PolymorphicTechnologyCategory & Node {
  href: URL
  title: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  internalId: UUID!
  portfolioCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PortfolioCategoryFilterInput @cost(weight: "10") order: [PortfolioCategorySortInput!] @cost(weight: "10")): PortfolioCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioCustomers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CustomerFilterInput @cost(weight: "10") order: [CustomerSortInput!] @cost(weight: "10")): PortfolioCustomersConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PortfolioItemFilterInput @cost(weight: "10") order: [PortfolioItemSortInput!] @cost(weight: "10")): PortfolioItemsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
}

type KeyValuePairOfStringAndHealthReportItem {
  key: String!
  value: HealthReportItem!
}

type Language implements Node {
  proficiency: ProficiencyType!
  title: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  internalId: UUID!
}

"A connection to a list of items."
type LanguagesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [LanguagesEdge!]
  "A flattened list of the nodes."
  nodes: [Language!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type LanguagesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Language!
}

"A connection to a list of items."
type OtherCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [OtherCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [OtherCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type OtherCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: OtherCategory!
}

type OtherCategory implements PolymorphicCategory & Node {
  title: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  internalId: UUID!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

"A connection to a list of items."
type PortfolioCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PortfolioCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [PortfolioCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type PortfolioCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PortfolioCategory!
}

type PortfolioCategory implements PolymorphicCategory & Node {
  title: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  internalId: UUID!
  customers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CustomerFilterInput @cost(weight: "10") order: [CustomerSortInput!] @cost(weight: "10")): CustomersConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PortfolioItemFilterInput @cost(weight: "10") order: [PortfolioItemSortInput!] @cost(weight: "10")): PortfolioItemsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  technologyCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: IPolymorphicTechnologyCategoryFilterInput @cost(weight: "10") order: [IPolymorphicTechnologyCategorySortInput!] @cost(weight: "10")): TechnologyCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
}

"A connection to a list of items."
type PortfolioCustomersConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PortfolioCustomersEdge!]
  "A flattened list of the nodes."
  nodes: [Customer!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type PortfolioCustomersEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Customer!
}

type PortfolioItem implements Node {
  year: Long!
  categoryId: UUID!
  title: String!
  href: URL
  technologyIds: [UUID!]!
  customerId: UUID!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  internalId: UUID!
  category: PortfolioCategory @cost(weight: "10")
  customer: Customer @cost(weight: "10")
  technologyCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: IPolymorphicTechnologyCategoryFilterInput @cost(weight: "10") order: [IPolymorphicTechnologyCategorySortInput!] @cost(weight: "10")): TechnologyCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  technologiesSummary: String! @cost(weight: "10")
}

"A connection to a list of items."
type PortfolioItemsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PortfolioItemsEdge!]
  "A flattened list of the nodes."
  nodes: [PortfolioItem!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type PortfolioItemsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PortfolioItem!
}

"A connection to a list of items."
type PortfolioTechnologyCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [PortfolioTechnologyCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [PolymorphicTechnologyCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type PortfolioTechnologyCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PolymorphicTechnologyCategory!
}

type Query {
  "Fetches an object given its ID."
  node("ID of the object." id: ID!): Node @cost(weight: "10")
  "Lookup nodes by a list of IDs."
  nodes("The list of node IDs." ids: [ID!]!): [Node]! @cost(weight: "10")
  achievements("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [AchievementSortInput!] @cost(weight: "10") where: AchievementFilterInput @cost(weight: "10")): AchievementsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  achievementById(id: ID!): Achievement @cost(weight: "10")
  health: HealthReportSummary! @cost(weight: "10")
  systemStatus: SystemInfoItem! @cost(weight: "10")
  categories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [IPolymorphicCategorySortInput!] @cost(weight: "10") where: IPolymorphicCategoryFilterInput @cost(weight: "10")): CategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  unknownCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [UnknownCategorySortInput!] @cost(weight: "10") where: UnknownCategoryFilterInput @cost(weight: "10")): UnknownCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  unknownCategoryById(id: ID!): UnknownCategory @cost(weight: "10")
  portfolioCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [PortfolioCategorySortInput!] @cost(weight: "10") where: PortfolioCategoryFilterInput @cost(weight: "10")): PortfolioCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioCategoryById(id: ID!): PortfolioCategory @cost(weight: "10")
  resumeCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [ResumeCategorySortInput!] @cost(weight: "10") where: ResumeCategoryFilterInput @cost(weight: "10")): ResumeCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  resumeCategoryById(id: ID!): ResumeCategory @cost(weight: "10")
  softwareDevelopmentCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [SoftwareDevelopmentCategorySortInput!] @cost(weight: "10") where: SoftwareDevelopmentCategoryFilterInput @cost(weight: "10")): SoftwareDevelopmentCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  softwareDevelopmentCategoryById(id: ID!): SoftwareDevelopmentCategory @cost(weight: "10")
  informationTechnologyCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [InformationTechnologyCategorySortInput!] @cost(weight: "10") where: InformationTechnologyCategoryFilterInput @cost(weight: "10")): InformationTechnologyCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  informationTechnologyCategoryById(id: ID!): InformationTechnologyCategory @cost(weight: "10")
  technologyCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [IPolymorphicTechnologyCategorySortInput!] @cost(weight: "10") where: IPolymorphicTechnologyCategoryFilterInput @cost(weight: "10")): TechnologyCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  otherCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [OtherCategorySortInput!] @cost(weight: "10") where: OtherCategoryFilterInput @cost(weight: "10")): OtherCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  otherCategoryById(id: ID!): OtherCategory @cost(weight: "10")
  contactItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [ContactItemSortInput!] @cost(weight: "10") where: ContactItemFilterInput @cost(weight: "10")): ContactItemsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  contactItemById(id: ID!): ContactItem @cost(weight: "10")
  customers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [CustomerSortInput!] @cost(weight: "10") where: CustomerFilterInput @cost(weight: "10")): CustomersConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  customerById(id: ID!): Customer @cost(weight: "10")
  educationItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [EducationItemSortInput!] @cost(weight: "10") where: EducationItemFilterInput @cost(weight: "10")): EducationItemsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  educationItemById(id: ID!): EducationItem @cost(weight: "10")
  languages("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [LanguageSortInput!] @cost(weight: "10") where: LanguageFilterInput @cost(weight: "10")): LanguagesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  languageById(id: ID!): Language @cost(weight: "10")
  portfolioItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [PortfolioItemSortInput!] @cost(weight: "10") where: PortfolioItemFilterInput @cost(weight: "10")): PortfolioItemsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioItemById(id: ID!): PortfolioItem @cost(weight: "10")
  textItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String order: [TextItemSortInput!] @cost(weight: "10") where: TextItemFilterInput @cost(weight: "10")): TextItemsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  textItemById(id: ID!): TextItem @cost(weight: "10")
}

"A connection to a list of items."
type ResumeCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [ResumeCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [ResumeCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type ResumeCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: ResumeCategory!
}

type ResumeCategory implements PolymorphicCategory & Node {
  associatedCategoryTypes: [CategoryType!]!
  title: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  associatedCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: IPolymorphicCategoryFilterInput @cost(weight: "10") order: [IPolymorphicCategorySortInput!] @cost(weight: "10")): AssociatedCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  internalId: UUID!
  educationItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: EducationItemFilterInput @cost(weight: "10") order: [EducationItemSortInput!] @cost(weight: "10")): EducationItemsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
}

"A connection to a list of items."
type SoftwareDevelopmentCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SoftwareDevelopmentCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [SoftwareDevelopmentCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type SoftwareDevelopmentCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: SoftwareDevelopmentCategory!
}

type SoftwareDevelopmentCategory implements PolymorphicCategory & PolymorphicTechnologyCategory & Node {
  href: URL
  title: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  internalId: UUID!
  portfolioCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PortfolioCategoryFilterInput @cost(weight: "10") order: [PortfolioCategorySortInput!] @cost(weight: "10")): PortfolioCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioCustomers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CustomerFilterInput @cost(weight: "10") order: [CustomerSortInput!] @cost(weight: "10")): PortfolioCustomersConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PortfolioItemFilterInput @cost(weight: "10") order: [PortfolioItemSortInput!] @cost(weight: "10")): PortfolioItemsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
}

type SystemInfoItem {
  version: String!
  startupTime: DateTime!
  upTime: TimeSpan!
  health: HealthReportSummary! @cost(weight: "10")
}

"A connection to a list of items."
type TechnologyCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TechnologyCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [PolymorphicTechnologyCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type TechnologyCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: PolymorphicTechnologyCategory!
}

type TextItem implements Node {
  key: String!
  title: String!
  content: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  internalId: UUID!
}

"A connection to a list of items."
type TextItemsConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TextItemsEdge!]
  "A flattened list of the nodes."
  nodes: [TextItem!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type TextItemsEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: TextItem!
}

type TimePeriod {
  start: Date!
  end: Date
}

"A connection to a list of items."
type UnknownCategoriesConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [UnknownCategoriesEdge!]
  "A flattened list of the nodes."
  nodes: [UnknownCategory!]
  "Identifies the total count of items in the connection."
  totalCount: Int! @cost(weight: "10")
}

"An edge in a connection."
type UnknownCategoriesEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: UnknownCategory!
}

type UnknownCategory implements PolymorphicCategory & Node {
  title: String!
  id: ID!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  internalId: UUID!
}

type UnknownTechnologyCategory implements Node & PolymorphicTechnologyCategory {
  id: ID!
  href: URL
  title: String!
  createdAt: DateTime!
  updatedAt: DateTime
  version: Long!
  internalId: UUID!
  portfolioCategories("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PortfolioCategoryFilterInput @cost(weight: "10") order: [PortfolioCategorySortInput!] @cost(weight: "10")): PortfolioCategoriesConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioCustomers("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: CustomerFilterInput @cost(weight: "10") order: [CustomerSortInput!] @cost(weight: "10")): PortfolioCustomersConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
  portfolioItems("Returns the first _n_ elements from the list." first: Int "Returns the elements in the list that come after the specified cursor." after: String "Returns the last _n_ elements from the list." last: Int "Returns the elements in the list that come before the specified cursor." before: String where: PortfolioItemFilterInput @cost(weight: "10") order: [PortfolioItemSortInput!] @cost(weight: "10")): PortfolioItemsConnection @listSize(assumedSize: 1000, slicingArguments: [ "first", "last" ], slicingArgumentDefaultValue: 100, sizedFields: [ "edges", "nodes" ], requireOneSlicingArgument: false) @cost(weight: "10")
}

input AchievementFilterInput {
  and: [AchievementFilterInput!]
  or: [AchievementFilterInput!]
  content: StringOperationFilterInput
  years: ListIntOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input AchievementSortInput {
  content: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input CategoryTypeOperationFilterInput {
  eq: CategoryType @cost(weight: "10")
  neq: CategoryType @cost(weight: "10")
  in: [CategoryType!] @cost(weight: "10")
  nin: [CategoryType!] @cost(weight: "10")
}

input ContactItemFilterInput {
  and: [ContactItemFilterInput!]
  or: [ContactItemFilterInput!]
  key: StringOperationFilterInput
  icon: StringOperationFilterInput
  title: StringOperationFilterInput
  description: StringOperationFilterInput
  href: UrlOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input ContactItemSortInput {
  key: SortEnumType @cost(weight: "10")
  icon: SortEnumType @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  description: SortEnumType @cost(weight: "10")
  href: UriSortInput @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input CustomerFilterInput {
  and: [CustomerFilterInput!]
  or: [CustomerFilterInput!]
  title: StringOperationFilterInput
  href: UrlOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input CustomerSortInput {
  title: SortEnumType @cost(weight: "10")
  href: UriSortInput @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input DateOperationFilterInput {
  eq: Date @cost(weight: "10")
  neq: Date @cost(weight: "10")
  in: [Date] @cost(weight: "10")
  nin: [Date] @cost(weight: "10")
  gt: Date @cost(weight: "10")
  ngt: Date @cost(weight: "10")
  gte: Date @cost(weight: "10")
  ngte: Date @cost(weight: "10")
  lt: Date @cost(weight: "10")
  nlt: Date @cost(weight: "10")
  lte: Date @cost(weight: "10")
  nlte: Date @cost(weight: "10")
}

input DateTimeOperationFilterInput {
  eq: DateTime @cost(weight: "10")
  neq: DateTime @cost(weight: "10")
  in: [DateTime] @cost(weight: "10")
  nin: [DateTime] @cost(weight: "10")
  gt: DateTime @cost(weight: "10")
  ngt: DateTime @cost(weight: "10")
  gte: DateTime @cost(weight: "10")
  ngte: DateTime @cost(weight: "10")
  lt: DateTime @cost(weight: "10")
  nlt: DateTime @cost(weight: "10")
  lte: DateTime @cost(weight: "10")
  nlte: DateTime @cost(weight: "10")
}

input EducationItemFilterInput {
  and: [EducationItemFilterInput!]
  or: [EducationItemFilterInput!]
  categoryId: UuidOperationFilterInput
  timePeriod: TimePeriodFilterInput
  title: StringOperationFilterInput
  href: UrlOperationFilterInput
  location: StringOperationFilterInput
  description: StringOperationFilterInput
  subjects: ListStringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input EducationItemSortInput {
  categoryId: SortEnumType @cost(weight: "10")
  timePeriod: TimePeriodSortInput @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  href: UriSortInput @cost(weight: "10")
  location: SortEnumType @cost(weight: "10")
  description: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input IPolymorphicCategoryFilterInput {
  and: [IPolymorphicCategoryFilterInput!]
  or: [IPolymorphicCategoryFilterInput!]
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
  title: StringOperationFilterInput
}

input IPolymorphicCategorySortInput {
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
}

input IPolymorphicTechnologyCategoryFilterInput {
  and: [IPolymorphicTechnologyCategoryFilterInput!]
  or: [IPolymorphicTechnologyCategoryFilterInput!]
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
  title: StringOperationFilterInput
  href: UrlOperationFilterInput
}

input IPolymorphicTechnologyCategorySortInput {
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  href: UriSortInput @cost(weight: "10")
}

input InformationTechnologyCategoryFilterInput {
  and: [InformationTechnologyCategoryFilterInput!]
  or: [InformationTechnologyCategoryFilterInput!]
  href: UrlOperationFilterInput
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input InformationTechnologyCategorySortInput {
  href: UriSortInput @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input IntOperationFilterInput {
  eq: Int @cost(weight: "10")
  neq: Int @cost(weight: "10")
  in: [Int] @cost(weight: "10")
  nin: [Int] @cost(weight: "10")
  gt: Int @cost(weight: "10")
  ngt: Int @cost(weight: "10")
  gte: Int @cost(weight: "10")
  ngte: Int @cost(weight: "10")
  lt: Int @cost(weight: "10")
  nlt: Int @cost(weight: "10")
  lte: Int @cost(weight: "10")
  nlte: Int @cost(weight: "10")
}

input LanguageFilterInput {
  and: [LanguageFilterInput!]
  or: [LanguageFilterInput!]
  proficiency: ProficiencyTypeOperationFilterInput
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input LanguageSortInput {
  proficiency: SortEnumType @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input ListCategoryTypeOperationFilterInput {
  all: CategoryTypeOperationFilterInput @cost(weight: "10")
  none: CategoryTypeOperationFilterInput @cost(weight: "10")
  some: CategoryTypeOperationFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListIntOperationFilterInput {
  all: IntOperationFilterInput @cost(weight: "10")
  none: IntOperationFilterInput @cost(weight: "10")
  some: IntOperationFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListStringOperationFilterInput {
  all: StringOperationFilterInput @cost(weight: "10")
  none: StringOperationFilterInput @cost(weight: "10")
  some: StringOperationFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input ListUuidOperationFilterInput {
  all: UuidOperationFilterInput @cost(weight: "10")
  none: UuidOperationFilterInput @cost(weight: "10")
  some: UuidOperationFilterInput @cost(weight: "10")
  any: Boolean @cost(weight: "10")
}

input LongOperationFilterInput {
  eq: Long @cost(weight: "10")
  neq: Long @cost(weight: "10")
  in: [Long] @cost(weight: "10")
  nin: [Long] @cost(weight: "10")
  gt: Long @cost(weight: "10")
  ngt: Long @cost(weight: "10")
  gte: Long @cost(weight: "10")
  ngte: Long @cost(weight: "10")
  lt: Long @cost(weight: "10")
  nlt: Long @cost(weight: "10")
  lte: Long @cost(weight: "10")
  nlte: Long @cost(weight: "10")
}

input OtherCategoryFilterInput {
  and: [OtherCategoryFilterInput!]
  or: [OtherCategoryFilterInput!]
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input OtherCategorySortInput {
  title: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input PortfolioCategoryFilterInput {
  and: [PortfolioCategoryFilterInput!]
  or: [PortfolioCategoryFilterInput!]
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input PortfolioCategorySortInput {
  title: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input PortfolioItemFilterInput {
  and: [PortfolioItemFilterInput!]
  or: [PortfolioItemFilterInput!]
  year: LongOperationFilterInput
  categoryId: UuidOperationFilterInput
  title: StringOperationFilterInput
  href: UrlOperationFilterInput
  technologyIds: ListUuidOperationFilterInput
  customerId: UuidOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input PortfolioItemSortInput {
  year: SortEnumType @cost(weight: "10")
  categoryId: SortEnumType @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  href: UriSortInput @cost(weight: "10")
  customerId: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input ProficiencyTypeOperationFilterInput {
  eq: ProficiencyType @cost(weight: "10")
  neq: ProficiencyType @cost(weight: "10")
  in: [ProficiencyType!] @cost(weight: "10")
  nin: [ProficiencyType!] @cost(weight: "10")
}

input ResumeCategoryFilterInput {
  and: [ResumeCategoryFilterInput!]
  or: [ResumeCategoryFilterInput!]
  associatedCategoryTypes: ListCategoryTypeOperationFilterInput
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input ResumeCategorySortInput {
  title: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input SoftwareDevelopmentCategoryFilterInput {
  and: [SoftwareDevelopmentCategoryFilterInput!]
  or: [SoftwareDevelopmentCategoryFilterInput!]
  href: UrlOperationFilterInput
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input SoftwareDevelopmentCategorySortInput {
  href: UriSortInput @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String @cost(weight: "10")
  neq: String @cost(weight: "10")
  contains: String @cost(weight: "20")
  ncontains: String @cost(weight: "20")
  in: [String] @cost(weight: "10")
  nin: [String] @cost(weight: "10")
  startsWith: String @cost(weight: "20")
  nstartsWith: String @cost(weight: "20")
  endsWith: String @cost(weight: "20")
  nendsWith: String @cost(weight: "20")
}

input TextItemFilterInput {
  and: [TextItemFilterInput!]
  or: [TextItemFilterInput!]
  key: StringOperationFilterInput
  title: StringOperationFilterInput
  content: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input TextItemSortInput {
  key: SortEnumType @cost(weight: "10")
  title: SortEnumType @cost(weight: "10")
  content: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input TimePeriodFilterInput {
  and: [TimePeriodFilterInput!]
  or: [TimePeriodFilterInput!]
  start: DateOperationFilterInput
  end: DateOperationFilterInput
}

input TimePeriodSortInput {
  start: SortEnumType @cost(weight: "10")
  end: SortEnumType @cost(weight: "10")
}

input UnknownCategoryFilterInput {
  and: [UnknownCategoryFilterInput!]
  or: [UnknownCategoryFilterInput!]
  title: StringOperationFilterInput
  id: UuidOperationFilterInput
  createdAt: DateTimeOperationFilterInput
  updatedAt: DateTimeOperationFilterInput
  version: LongOperationFilterInput
}

input UnknownCategorySortInput {
  title: SortEnumType @cost(weight: "10")
  id: SortEnumType @cost(weight: "10")
  createdAt: SortEnumType @cost(weight: "10")
  updatedAt: SortEnumType @cost(weight: "10")
  version: SortEnumType @cost(weight: "10")
}

input UriSortInput {
  absolutePath: SortEnumType @cost(weight: "10")
  absoluteUri: SortEnumType @cost(weight: "10")
  localPath: SortEnumType @cost(weight: "10")
  authority: SortEnumType @cost(weight: "10")
  hostNameType: SortEnumType @cost(weight: "10")
  isDefaultPort: SortEnumType @cost(weight: "10")
  isFile: SortEnumType @cost(weight: "10")
  isLoopback: SortEnumType @cost(weight: "10")
  pathAndQuery: SortEnumType @cost(weight: "10")
  isUnc: SortEnumType @cost(weight: "10")
  host: SortEnumType @cost(weight: "10")
  port: SortEnumType @cost(weight: "10")
  query: SortEnumType @cost(weight: "10")
  fragment: SortEnumType @cost(weight: "10")
  scheme: SortEnumType @cost(weight: "10")
  originalString: SortEnumType @cost(weight: "10")
  dnsSafeHost: SortEnumType @cost(weight: "10")
  idnHost: SortEnumType @cost(weight: "10")
  isAbsoluteUri: SortEnumType @cost(weight: "10")
  userEscaped: SortEnumType @cost(weight: "10")
  userInfo: SortEnumType @cost(weight: "10")
}

input UrlOperationFilterInput {
  eq: URL @cost(weight: "10")
  neq: URL @cost(weight: "10")
  in: [URL] @cost(weight: "10")
  nin: [URL] @cost(weight: "10")
  gt: URL @cost(weight: "10")
  ngt: URL @cost(weight: "10")
  gte: URL @cost(weight: "10")
  ngte: URL @cost(weight: "10")
  lt: URL @cost(weight: "10")
  nlt: URL @cost(weight: "10")
  lte: URL @cost(weight: "10")
  nlte: URL @cost(weight: "10")
}

input UuidOperationFilterInput {
  eq: UUID @cost(weight: "10")
  neq: UUID @cost(weight: "10")
  in: [UUID] @cost(weight: "10")
  nin: [UUID] @cost(weight: "10")
  gt: UUID @cost(weight: "10")
  ngt: UUID @cost(weight: "10")
  gte: UUID @cost(weight: "10")
  ngte: UUID @cost(weight: "10")
  lt: UUID @cost(weight: "10")
  nlt: UUID @cost(weight: "10")
  lte: UUID @cost(weight: "10")
  nlte: UUID @cost(weight: "10")
}

enum CategoryType {
  NONE
  PORTFOLIO
  RESUME
  SOFTWARE_DEVELOPMENT
  INFORMATION_TECHNOLOGY
  OTHER
}

enum HealthStatus {
  UNHEALTHY
  DEGRADED
  HEALTHY
}

enum ProficiencyType {
  NONE
  ELEMENTARY
  LIMITED_WORKING
  PROFICIENT
  FLUENT
  NATIVE
}

enum SortEnumType {
  ASC
  DESC
}

"The purpose of the `cost` directive is to define a `weight` for GraphQL types, fields, and arguments. Static analysis can use these weights when calculating the overall cost of a query or response."
directive @cost("The `weight` argument defines what value to add to the overall cost for every appearance, or possible appearance, of a type, field, argument, etc." weight: String!) on SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM | INPUT_FIELD_DEFINITION

"The purpose of the `@listSize` directive is to either inform the static analysis about the size of returned lists (if that information is statically available), or to point the analysis to where to find that information."
directive @listSize("The `assumedSize` argument can be used to statically define the maximum length of a list returned by a field." assumedSize: Int "The `slicingArguments` argument can be used to define which of the field's arguments with numeric type are slicing arguments, so that their value determines the size of the list returned by that field. It may specify a list of multiple slicing arguments." slicingArguments: [String!] "The `slicingArgumentDefaultValue` argument can be used to define a default value for a slicing argument, which is used if the argument is not present in a query." slicingArgumentDefaultValue: Int "The `sizedFields` argument can be used to define that the value of the `assumedSize` argument or of a slicing argument does not affect the size of a list returned by a field itself, but that of a list returned by one of its sub-fields." sizedFields: [String!] "The `requireOneSlicingArgument` argument can be used to inform the static analysis that it should expect that exactly one of the defined slicing arguments is present in a query. If that is not the case (i.e., if none or multiple slicing arguments are present), the static analysis may throw an error." requireOneSlicingArgument: Boolean! = true) on FIELD_DEFINITION

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `Date` scalar represents an ISO-8601 compliant date type."
scalar Date

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The `Long` scalar type represents non-fractional signed whole 64-bit numeric values. Long can represent values between -(2^63) and 2^63 - 1."
scalar Long

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan

scalar URL @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc3986")

scalar UUID @specifiedBy(url: "https:\/\/tools.ietf.org\/html\/rfc4122")
