@page "/portfolio"
@attribute [StreamRendering]
@inject IFiakkasNetApi Api
@inject IAppCache Cache
@inject ILogger<Portfolio> Logger
@using Polly
@implements IDisposable

<UniversalTitle Title="Portfolio">
    <button type="button"
            class="btn btn-outline-primary rounded-circle p-0 px-1"
            title="Refresh"
            disabled="@(InitialLoading || PartialLoading)"
            @onclick="Refresh">
        <i class="bi bi-arrow-clockwise"></i>
    </button>
</UniversalTitle>

<ContentFlow IsLoading="InitialLoading"
             HasError="@HasError"
             HasData="@(Model.Count > 0)"
             GenericLoadingCssClass="@_genericLoadingCssClass">
    <div class="d-flex flex-column gap-2">
        @foreach (
            var yearSection in Model
                .GroupBy(x => x.Year)
                .OrderByDescending(x => x.Key)
        )
        {
            <div class="year-section card" @key="yearSection.Key">
                <div class="card-body">
                    <h3 class="year-title card-title">
                        @yearSection.Key
                    </h3>
                    <div class="items-of-year row gap-2">
                        @foreach (
                            var categorySection in yearSection
                                .GroupBy(x => new
                                {
                                    x.Category!.Id,
                                    x.Category.Title
                                })
                                .OrderBy(cs => cs.Key.Title)
                        )
                        {
                            <div class="category-section col-12 col-xl" @key="categorySection.Key.Id">
                                <h4 class="category-title card-title">
                                    @categorySection.Key.Title
                                </h4>
                                <div class="items-of-category striped-container d-flex flex-column gap-1">
                                    @foreach (
                                        var categoryItem in categorySection
                                            .OrderByDescending(ci => ci.CreatedAt)
                                    )
                                    {
                                        <div class="category-item striped-item p-2 px-3 d-flex flex-column gap-1"
                                             @key="categoryItem.Id">
                                            <div>
                                                @if (categoryItem.Href is not null)
                                                {
                                                    <a href="@categoryItem.Href" target="_blank"
                                                       class="text-decoration-none">
                                                        @categoryItem.Title
                                                    </a>
                                                }
                                                else
                                                {
                                                    <span>
                                                        @categoryItem.Title
                                                    </span>
                                                }
                                            </div>

                                            @if (categoryItem.Customer is { Title.Length: > 0 })
                                            {
                                                <div class="small d-flex gap-2">
                                                    <i class="bi bi-person-rolodex flex-shrink-0"></i>
                                                    @if (categoryItem.Customer.Href is not null)
                                                    {
                                                        <a href="@categoryItem.Customer.Href" target="_blank"
                                                           class="text-decoration-none">
                                                            @categoryItem.Customer.Title
                                                        </a>
                                                    }
                                                    else
                                                    {
                                                        <span>
                                                            @categoryItem.Customer.Title
                                                        </span>
                                                    }
                                                </div>
                                            }
                                            @if (categoryItem.TechnologiesSummary.Length > 0)
                                            {
                                                <div class="small d-flex gap-2 fst-italic fw-light">
                                                    <i class="bi bi-tools flex-shrink-0"></i>
                                                    <span>
                                                        @categoryItem.TechnologiesSummary
                                                    </span>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>
                            </div>
                        }
                    </div>
                </div>
            </div>
        }

        @if (PartialLoading)
        {
            <div class="card">
                <div class="card-body">
                    <Skeleton CssClass="@_genericLoadingCssClass"/>
                </div>
            </div>
        }
    </div>

</ContentFlow>


@code {
    private const string _cacheKey = "portfolio_data";
    private const string _genericLoadingCssClass = "py-2 lead";
    private readonly TimeSpan _cacheDuration = TimeSpan.FromHours(1);
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    private const int _pageSize = 50;

    [Inject(Key = nameof(FiakkasNetApi))]
    public ResiliencePipeline ResiliencePipeline { get; set; } = default!;

    internal bool InitialLoading { get; private set; } = true;
    internal bool PartialLoading { get; private set; } = true;
    private bool HasError { get; set; }
    internal HashSet<IGetPortfolioItems_PortfolioItems_Nodes> Model { get; private set; } = [];

    private async Task Refresh()
    {
        if (PartialLoading)
        {
            return;
        }

        await SetData(false);
    }

    private async Task<IGetPortfolioItems_PortfolioItems?> GetDataChunk(string? after = default) =>
        await ResiliencePipeline.ExecuteAsync(
            async ct =>
            {
                var result = await Api.GetPortfolioItems.ExecuteAsync(
                    null,
                    null,
                    _pageSize,
                    null,
                    after,
                    null,
                    ct
                );

                result.EnsureNoErrors();

                return result.Data?.PortfolioItems;
            },
            _cancellationTokenSource.Token
        );

    private async IAsyncEnumerable<IReadOnlyList<IGetPortfolioItems_PortfolioItems_Nodes>> GetData()
    {
        var initialResult = await GetDataChunk();

        if (
            initialResult is not
            {
                PageInfo:
                {
                    HasNextPage: var hasNextPageInitial,
                    EndCursor: { Length: > 0 } endCursorInitial
                },
                Nodes.Count: > 0,
                TotalCount: > 0 and var totalCount
            }
        )
        {
            yield break;
        }

        yield return initialResult.Nodes;

        if (!hasNextPageInitial)
        {
            yield break;
        }

        var limit = (int)Math.Floor(totalCount / (_pageSize * 1D));
        var startCursor = endCursorInitial;

        for (var i = 0; i < limit; i++)
        {
            var result = await GetDataChunk(startCursor);

            if (
                result is not
                {
                    PageInfo:
                    {
                        HasNextPage: var hasNextPage,
                        EndCursor: { Length: > 0 } endCursor
                    },
                    Nodes.Count: > 0
                }
            )
            {
                yield break;
            }

            startCursor = endCursor;

            yield return result.Nodes;

            if (hasNextPage == false)
            {
                yield break;
            }
        }
    }

    private void PatchItems(IEnumerable<IGetPortfolioItems_PortfolioItems_Nodes> items)
    {
        foreach (var item in items)
        {
            Model.Add(item);
        }
    }

    private async Task PatchStateUpdate()
    {
        await 250.SafeDelay(_cancellationTokenSource.Token);

        InitialLoading = Model.Count == 0;

        StateHasChanged();
    }

    private async Task SetData(bool useCache = true)
    {
        try
        {
            InitialLoading = true;
            PartialLoading = true;
            HasError = false;
            Model = [];

            StateHasChanged();

            if (
                useCache
                && Cache.TryGetValue<HashSet<IGetPortfolioItems_PortfolioItems_Nodes>>(
                    _cacheKey,
                    out var cachedModel
                )
            )
            {
                foreach (var items in cachedModel.Chunk(_pageSize))
                {
                    PatchItems(items);
                    await PatchStateUpdate();
                }

                return;
            }

            Cache.Remove(_cacheKey);

            await foreach (var items in GetData().WithCancellation(_cancellationTokenSource.Token))
            {
                PatchItems(items.Where(x => x.Category is { Id.Length: > 0, Title.Length: > 0 }));
                await PatchStateUpdate();
            }

            if (Model.Count > 0)
            {
                Cache.Add(_cacheKey, Model, _cacheDuration);
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Failed to retrieve data with message: {Message}", ex.Message);
            Model = [];
            HasError = true;
        }
        finally
        {
            PartialLoading = false;
            InitialLoading = false;

            StateHasChanged();
        }
    }

    protected override async Task OnInitializedAsync() => await SetData();

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }

}
