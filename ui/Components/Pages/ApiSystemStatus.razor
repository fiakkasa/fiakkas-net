@page "/apiSystemStatus"
@attribute [StreamRendering]
@inject ui.GraphQL.IFiakkasNetApi _api
@inject ILogger<ApiSystemStatus> _logger
@implements IDisposable
@using System.Text.Json
@using System.Text.Json.Serialization

<UniversalTitle Title="API System Status">
    <button type="button" class="btn btn-outline-primary rounded-5 p-0 px-1" title="Refresh" disabled="@_loading"
        @onclick="SetData">
        <i class="bi bi-arrow-clockwise"></i>
    </button>
</UniversalTitle>


<ContentFlow IsLoading="@_loading" HasError="@_hasError" HasContent="@(_result is { Length: > 0 })">
    <ChildContent>
        <pre>@_result</pre>
    </ChildContent>
</ContentFlow>


@code {
    private bool _loading = true;
    private bool _hasError = false;
    private string? _result;
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    private JsonSerializerOptions? _jsonSerializerOptions;

    private JsonSerializerOptions JsonSerializerOptions
    {
        get
        {
            if (_jsonSerializerOptions == null)
            {
                _jsonSerializerOptions = new() { WriteIndented = true };
                _jsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());
            }

            return _jsonSerializerOptions;
        }
    }

    private async Task SetData()
    {
        try
        {
            _loading = true;
            _hasError = false;
            _result = default;

            StateHasChanged();

            var result = await _api.GetSystemStatus.ExecuteAsync(_cancellationTokenSource.Token);

            result.EnsureNoErrors();

            _result = JsonSerializer.Serialize(result.Data?.SystemStatus, JsonSerializerOptions);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Failed to retrieve data with message: {Message}", ex.Message);
            _result = default;
            _hasError = true;
        }

        _loading = false;

        StateHasChanged();
    }

    protected override async Task OnInitializedAsync() => await SetData();

    public void Dispose()
    {
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }
}
