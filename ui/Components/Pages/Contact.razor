@page "/contact"
@inject IEmailService EmailService
@implements IDisposable

<UniversalTitle Title="Contact"/>

<div class="card">
    <div class="card-body">
        <ContentFlow IsLoading="Loading" HasData="true">
            @if (SuccessMessageExpirationTimer is not null)
            {
                <div class="alert alert-success d-flex">
                    <div class="flex-fill">
                        Thank you for getting in touch!
                    </div>
                    <button type="button"
                            class="btn-close flex-shrink-0"
                            @onclick="ClearSuccessMessage">
                    </button>
                </div>
            }

            <EditForm EditContext="EditContext"
                      OnValidSubmit="@HandleSubmit"
                      class="d-flex flex-column gap-3">
                <DataAnnotationsValidator/>

                <ValidationMessage class="small text-danger" For="@(() => _errorMessagePlaceholder)"/>
                <ValidationMessage class="small text-warning" For="@(() => _recipientAddressErrorMessagePlaceholder)"/>

                <div>
                    <label>Email</label>
                    <div class="input-group">
                        <EagerInputText type="email"
                                        class="form-control"
                                        tabindex="1"
                                        placeholder="you@awesome-email.com"
                                        data-kind="email"
                                        @bind-Value="Model.SenderAddress"/>
                        <span class="input-group-text">
                            <i class="bi bi-envelope-at"></i>
                        </span>
                    </div>
                    <ValidationMessage class="small text-warning" For="@(() => Model.SenderAddress)"/>
                </div>

                <div>
                    <label>Subject</label>
                    <div class="input-group">
                        <EagerInputText type="text"
                                        class="form-control"
                                        tabindex="2"
                                        placeholder="What would you like to inquire about?"
                                        maxlength="@ContactConsts.MaxSubjectCharacters"
                                        data-kind="subject"
                                        @bind-Value="@Model.Subject"/>
                        <span class="input-group-text">
                            <i class="bi bi-pencil"></i>
                        </span>
                    </div>
                    <div class="d-flex">
                        <div class="flex-fill">
                            <ValidationMessage class="small text-warning" For="@(() => Model.Subject)"/>
                        </div>
                        <i class="flex-shrink-0 small text-primary">
                            @Model.Subject.Length / @ContactConsts.MaxSubjectCharacters
                        </i>
                    </div>
                </div>

                <div>
                    <label>Message</label>
                    <div class="input-group">
                        <EagerInputTextArea class="form-control"
                                            rows="5"
                                            tabindex="3"
                                            placeholder="Share your thoughts, ideas, or questions..."
                                            maxlength="@ContactConsts.MaxMessageCharacters"
                                            data-kind="message"
                                            @bind-Value="Model.Message"/>
                        <span class="input-group-text">
                            <i class="bi bi-journal-text"></i>
                        </span>
                    </div>
                    <div class="d-flex">
                        <div class="flex-fill">
                            <ValidationMessage class="small text-warning" For="@(() => Model.Message)"/>
                        </div>
                        <i class="flex-shrink-0 small text-primary">
                            @Model.Message.Length / @ContactConsts.MaxMessageCharacters
                        </i>
                    </div>
                </div>

                <div>
                    <div class="input-group">
                        <EagerInputText type="text"
                                        class="form-control"
                                        tabindex="4"
                                        placeholder="Verification Code"
                                        maxlength="5"
                                        data-kind="verification"
                                        @bind-Value="Model.VerificationCodeEntered"/>
                        @if (!RefreshingCaptcha)
                        {
                            <DntInputCaptcha @bind-Value="Model.VerificationCode"
                                             Min="1000"
                                             Max="99999"
                                             Language="@NumberToWordLanguage.English"
                                             DisplayMode="@DisplayMode.ShowDigits"
                                             AllowThousandsSeparators="false"
                                             AbsoluteExpiration="@TimeSpan.FromMinutes(2)"
                                             ShowRefreshButton="false"
                                             FontSize="21"
                                             FontName="Times New Roman"
                                             FontColor="#603F83FF"
                                             BackgroundColor="#FCF6F5FF"
                                             RandomLinesCount="2"
                                             RandomCirclesCount="6"
                                             BorderWidth="0.3"
                                             BorderColor="grey"
                                             NoisePointsCount="25"
                                             Padding="11"
                                             ShadowBlur="7"
                                             ShadowColor="navy"
                                             ShadowOffsetX="-3"
                                             ShadowOffsetY="-3"
                                             TimerInterval="@TimeSpan.FromMilliseconds(2500)"
                                             CaptchaCanvasClass=""
                                             CaptchaDivClass="input-group-text d-flex justify-content-center align-self-center p-0"/>
                        }
                        <button type="button"
                                class="input-group-text btn btn-primary rounded-0"
                                tabindex="7"
                                disabled="@RefreshingCaptcha"
                                @onclick="RefreshCaptcha">
                            <i class="bi bi-arrow-repeat"></i>
                        </button>
                        <span class="input-group-text">
                            <i class="bi-shield-lock"></i>
                        </span>
                    </div>
                    <ValidationMessage class="small text-warning" For="@(() => Model.VerificationCodeEntered)"/>
                </div>

                <div class="d-flex justify-content-end me-2 gap-2">
                    <button type="reset"
                            class="btn btn-secondary px-3"
                            tabindex="6"
                            @onclick="ResetForm">
                        Reset
                    </button>
                    <button type="submit"
                            class="btn btn-primary px-3 me-4"
                            tabindex="5">
                        <span class="px-3">Submit</span>
                    </button>
                </div>
            </EditForm>
        </ContentFlow>
    </div>
</div>

@code {
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    private EditContext? _editContext;
    private ValidationMessageStore? _validationMessageStore;
    private readonly string _recipientAddressErrorMessagePlaceholder = "recipient-address-message-placeholder";
    private readonly string _errorMessagePlaceholder = "error-message-placeholder";

    internal ContactFormModel Model { get; private set; } = new();

    internal EditContext EditContext
    {
        get
        {
            if (_editContext is not null) return _editContext;

            _editContext = new(Model);
            AttachEditContextEvents();

            return _editContext;
        }
    }

    private ValidationMessageStore ValidationMessageStore => _validationMessageStore ??= new(EditContext);
    private bool Loading { get; set; }
    private bool RefreshingCaptcha { get; set; }
    private Timer? SuccessMessageExpirationTimer { get; set; }

    private async ValueTask Delay() => await 250.SafeDelay(_cancellationTokenSource.Token);

    private void AttachEditContextEvents()
    {
        EditContext.OnValidationRequested += HandleValidationRequested;
        EditContext.OnFieldChanged += HandleFieldChange;
    }

    private void DetachEditContextEvents()
    {
        EditContext.OnValidationRequested -= HandleValidationRequested;
        EditContext.OnFieldChanged -= HandleFieldChange;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args) =>
        ValidationMessageStore.Clear();

    private void HandleFieldChange(object? sender, FieldChangedEventArgs args) =>
        ValidationMessageStore.Clear(args.FieldIdentifier);

    private void ClearSuccessMessage()
    {
        if (SuccessMessageExpirationTimer is null) return;

        SuccessMessageExpirationTimer.Dispose();
        SuccessMessageExpirationTimer = default;
    }

    private void ScheduleAutoClearSuccessMessage()
    {
        if (SuccessMessageExpirationTimer is not null) return;

        SuccessMessageExpirationTimer = new(
            SuccessMessageExpirationTimerCallback,
            null,
            (int)TimeSpan.FromSeconds(10).TotalMilliseconds,
            Timeout.Infinite
        );
    }

    private async void SuccessMessageExpirationTimerCallback(object? _)
        => await InvokeAsync(() =>
        {
            ClearSuccessMessage();
            StateHasChanged();
        });

    private async Task RefreshCaptcha()
    {
        if (RefreshingCaptcha) return;

        RefreshingCaptcha = true;
        StateHasChanged();

        await Delay();

        RefreshingCaptcha = false;
        StateHasChanged();

        if (Model.VerificationCodeEntered.Length == 0) return;

        await Delay();

        EditContext.NotifyFieldChanged(EditContext.Field(nameof(Model.VerificationCode)));
        EditContext.NotifyFieldChanged(EditContext.Field(nameof(Model.VerificationCodeEntered)));
    }

    private async Task ResetForm()
    {
        Loading = true;
        StateHasChanged();

        await Delay();

        ClearSuccessMessage();
        DetachEditContextEvents();
        _validationMessageStore = default;
        _editContext = default;
        Model = new();
        Loading = false;

        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        Loading = true;
        StateHasChanged();

        await Delay();

        ClearSuccessMessage();

        var result = await EmailService.SendFrom(
            Model.SenderAddress,
            Model.Subject,
            Model.Message,
            _cancellationTokenSource.Token
        );

        var resetForm = result.Match(
            isSuccess =>
            {
                if (isSuccess) return true;

                ValidationMessageStore.Add(() => _errorMessagePlaceholder, "Whoops, something went wrong...");

                return false;
            },
            validationErrors =>
            {
                foreach (var error in validationErrors)
                {
                    Expression<Func<object>> accessor = error.MemberNames.FirstOrDefault() switch
                    {
                        EmailConsts.SenderAddressFieldName => () => Model.SenderAddress,
                        EmailConsts.SubjectFieldName => () => Model.Subject,
                        EmailConsts.BodyFieldName => () => Model.Message,
                        EmailConsts.RecipientAddressFieldName => () => _recipientAddressErrorMessagePlaceholder,
                        _ => () => _errorMessagePlaceholder
                    };

                    ValidationMessageStore.Add(accessor, error.ToPrettyErrorMessage());
                }

                return false;
            },
            exception =>
            {
                ValidationMessageStore.Add(() => _errorMessagePlaceholder, exception.ToPrettyErrorMessage());

                return false;
            }
        );

        Loading = false;

        if (!resetForm)
        {
            EditContext.NotifyValidationStateChanged();
            StateHasChanged();

            return;
        }

        await ResetForm();
        ScheduleAutoClearSuccessMessage();
    }

    public void Dispose()
    {
        DetachEditContextEvents();
        ClearSuccessMessage();
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }

}
