@page "/Contact"
@using Microsoft.AspNetCore.Components.Forms
@using System.Linq.Expressions
@inject IEmailService _emailService
@implements IDisposable

<UniversalTitle Title="Contact" />

<div class="card">
    <div class="card-body">
        @if (SuccessMessageExpirationTimer is { })
        {
            <div class="alert alert-success d-flex">
                <div class="flex-fill">
                    Thank you for getting in touch!
                </div>
                <button type="button" class="btn-close flex-shrink-0" @onclick="ClearSuccessMessage"></button>
            </div>
        }

        <EditForm EditContext="EditContext" OnValidSubmit="@HandleSubmit" class="d-flex flex-column gap-3">
            <DataAnnotationsValidator />

            <ValidationMessage class="small text-danger" For="@(() => _errorMessage)" />
            <ValidationMessage class="small text-warning" For="@(() => _warningMessage)" />

            <div>
                <label>Email</label>
                <div class="input-group">
                    <EagerInputText type="email" class="form-control" @bind-Value="Model.SenderAddress"
                        placeholder="you@awesome-email.com" disabled="@Loading" />
                    <span class="input-group-text">
                        <i class="bi bi-envelope-at"></i>
                    </span>
                </div>
                <ValidationMessage class="small text-warning" For="@(() => Model.SenderAddress)" />
            </div>

            <div>
                <label>Subject</label>
                <div class="input-group">
                    <EagerInputText type="text" class="form-control" placeholder="What would you like to inquire about?" 
                        disabled="@Loading" maxlength="@ContactConsts.MaxSubjectCharacters"
                        @bind-Value="@Model.Subject" />
                    <span class="input-group-text">
                        <i class="bi bi-pencil"></i>
                    </span>
                </div>
                <div class="d-flex">
                    <div class="flex-fill">
                        <ValidationMessage class="small text-warning" For="@(() => Model.Subject)" />
                    </div>
                    <i class="flex-shrink-0 small text-primary">
                        @Model.Subject.Length / @ContactConsts.MaxSubjectCharacters
                    </i>
                </div>
            </div>

            <div>
                <label>Message</label>
                <div class="input-group">
                    <EagerInputTextArea class="form-control" rows="5" placeholder="Share your thoughts, ideas, or questions..." 
                        disabled="@Loading" maxlength="@ContactConsts.MaxMessageCharacters" 
                        @bind-Value="Model.Message" />
                    <span class="input-group-text">
                        <i class="bi bi-journal-text"></i>
                    </span>
                </div>
                <div class="d-flex">
                    <div class="flex-fill">
                        <ValidationMessage class="small text-warning" For="@(() => Model.Message)" />
                    </div>
                    <i class="flex-shrink-0 small text-primary">
                        @Model.Message.Length / @ContactConsts.MaxMessageCharacters
                    </i>
                </div>
            </div>

            <div>
                <div class="input-group">
                    <EagerInputText class="form-control" placeholder="Verification Code" disabled="@Loading" 
                        @bind-Value="Model.VerificationCodeEntered" />
                    <DntInputCaptcha @bind-Value="Model.VerificationCode"
                        Language = "@NumberToWordLanguage.English"
                        DisplayMode = "@DisplayMode.ShowDigits"
                        AllowThousandsSeparators = "false"
                        Max = "99999"
                        Min = "1000"
                        AbsoluteExpiration = "@TimeSpan.FromMinutes(2)"
                        ShowRefreshButton = "@(!Loading)"
                        FontSize = "21"
                        FontName = "Times New Roman"
                        FontColor = "#603F83FF"
                        BackgroundColor = "#FCF6F5FF"
                        RandomLinesCount = "2"
                        RandomCirclesCount = "6"
                        BorderWidth = "0.3"
                        BorderColor = "grey"
                        NoisePointsCount = "25"
                        Padding = "11"
                        ShadowBlur = "7"
                        ShadowColor = "navy"
                        ShadowOffsetX = "-3"
                        ShadowOffsetY = "-3"
                        TimerInterval = "@TimeSpan.FromMilliseconds(2500)"
                        CaptchaCanvasClass = ""
                        CaptchaDivClass = "input-group-text d-flex justify-content-center align-self-center p-0"
                        RefreshButtonClass = "btn btn-primary rounded-0">
                        <RefreshButtonChildContent>
                            <i class="bi bi-arrow-repeat"></i>
                        </RefreshButtonChildContent>
                    </DntInputCaptcha>
                    <span class="input-group-text">
                        <span class="bi-shield-lock"></span>
                    </span>
                </div>
                <ValidationMessage class="small text-warning" For="@(() => Model.VerificationCodeEntered)" />
            </div>

            <div class="d-flex justify-content-end me-2 gap-2">
                <button type="reset" class="btn btn-secondary px-3" disabled="@Loading" @onclick="ResetForm">
                    Reset
                </button>
                <button type="submit" class="btn btn-primary px-3 me-4" disabled="@Loading">
                    @if (Loading)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                    }
                    <span class="px-3">Submit</span>
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private readonly CancellationTokenSource _cancellationTokenSource = new();
    private EditContext? _editContext;
    private ValidationMessageStore? _validationMessageStore;
    private string _warningMessage = string.Empty;
    private string _errorMessage = string.Empty;

    internal ContactFormModel Model { get; private set; } = new();
    internal EditContext EditContext => _editContext ??= new(Model);
    private ValidationMessageStore ValidationMessageStore => _validationMessageStore ??= new(EditContext);
    internal bool Loading { get; private set; } = false;
    internal Timer? SuccessMessageExpirationTimer { get; private set; }

    protected override void OnInitialized() => AttachEditContextEvents();

    private void AttachEditContextEvents()
    {
        EditContext.OnValidationRequested += HandleValidationRequested;
        EditContext.OnFieldChanged += HandleFieldChange;
    }

    private void DettachEditContextEvents()
    {
        EditContext.OnValidationRequested -= HandleValidationRequested;
        EditContext.OnFieldChanged -= HandleFieldChange;
    }

    private void HandleValidationRequested(object? sender, ValidationRequestedEventArgs args) =>
        ValidationMessageStore.Clear();

    private void HandleFieldChange(object? sender, FieldChangedEventArgs args) =>
        ValidationMessageStore.Clear(args.FieldIdentifier);

    private void ClearSuccessMessage()
    {
        SuccessMessageExpirationTimer?.Dispose();
        SuccessMessageExpirationTimer = default;
    }

    private void ScheduleAutoClearSuccessMessage()
    {
        if (SuccessMessageExpirationTimer is { }) return;

        SuccessMessageExpirationTimer = new(
            callback: async _ =>
            {
                await InvokeAsync(() =>
                {
                    ClearSuccessMessage();
                    StateHasChanged();
                });
            },
            state: null,
            dueTime: (int)TimeSpan.FromSeconds(10).TotalMilliseconds,
            period: Timeout.Infinite
        );
    }

    private void ResetForm()
    {
        if (Loading) return;

        DettachEditContextEvents();

        _validationMessageStore = default;
        _editContext = default;
        Model = new();

        AttachEditContextEvents();
        ClearSuccessMessage();
        StateHasChanged();
    }

    private async Task HandleSubmit()
    {
        if (Loading) return;

        ClearSuccessMessage();
        Loading = true;
        StateHasChanged();

        var result = await _emailService.SendFrom(
            Model.SenderAddress,
            Model.Subject,
            Model.Message,
            _cancellationTokenSource.Token
        );

        var resetForm = result.Match(
            isSuccess =>
            {
                if (isSuccess) return true;

                ValidationMessageStore.Add(() => _errorMessage, "Whoops, something went wrong...");

                return false;
            },
            validationErrors =>
            {
                foreach (var error in validationErrors)
                {
                    Expression<Func<object>> accessor = error.MemberNames.FirstOrDefault() switch
                    {
                        EmailConsts.SenderAddressFieldName => () => Model.SenderAddress,
                        EmailConsts.SubjectFieldName => () => Model.Subject,
                        EmailConsts.BodyFieldName => () => Model.Message,
                        EmailConsts.RecipientAddressFieldName => () => _warningMessage,
                        _ => () => _errorMessage
                    };

                    ValidationMessageStore.Add(accessor, error.ToPrettyErrorMessage());
                }

                return false;
            },
            exception =>
            {
                ValidationMessageStore.Add(() => _errorMessage, exception.ToPrettyErrorMessage());

                return false;
            }
        );

        Loading = false;

        if (!resetForm)
        {
            EditContext.NotifyValidationStateChanged();
            StateHasChanged();

            return;
        }

        ResetForm();
        ScheduleAutoClearSuccessMessage();
    }

    public void Dispose()
    {
        DettachEditContextEvents();
        SuccessMessageExpirationTimer?.Dispose();
        _cancellationTokenSource.Cancel();
        _cancellationTokenSource.Dispose();
    }
}