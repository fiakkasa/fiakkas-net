@page "/Contact"
@using ui.Models
@using Microsoft.AspNetCore.Components.Forms

<UniversalTitle Title="Contact" />

<div class="card">
    <div class="card-body">
        <EditForm @ref="_editForm" Model="@Model" OnValidSubmit="@HandleValidSubmit" class="d-flex flex-column gap-3">
            <DataAnnotationsValidator />

            <div>
                <label>Email</label>
                <div class="input-group">
                    <CustomInputText type="email" class="form-control" @bind-Value="Model.FromEmail"
                        placeholder="you@awesome-email.com" disabled="@Loading" />
                    <span class="input-group-text">
                        <i class="bi bi-envelope-at"></i>
                    </span>
                </div>
                <ValidationMessage class="small text-warning" For="@(() => Model.FromEmail)" />
            </div>

            <div>
                <label>Subject</label>
                <div class="input-group">
                    <CustomInputText type="text" class="form-control" @bind-Value="Model.Subject"
                        placeholder="I'm interested in discussing..." disabled="@Loading" />
                    <span class="input-group-text">
                        <i class="bi bi-pencil"></i>
                    </span>
                </div>
                <ValidationMessage class="small text-warning" For="@(() => Model.Subject)" />
            </div>

            <div>
                <label>Message</label>
                <div class="input-group">
                    <CustomInputTextArea class="form-control" @bind-Value="Model.Message" rows="5"
                        placeholder="Share your thoughts, ideas, or questions..." disabled="@Loading" />
                    <span class="input-group-text">
                        <i class="bi bi-journal-text"></i>
                    </span>
                </div>
                <ValidationMessage class="small text-warning" For="@(() => Model.Message)" />
            </div>

            <div class="d-flex justify-content-end me-2 gap-2">
                <button type="reset" class="btn btn-secondary px-3" @onclick="ResetForm" disabled="@ResetDisabled">
                    Reset
                </button>
                <button type="submit" class="btn btn-primary px-3 me-4" disabled="@SubmitDisabled">
                    @if (Loading)
                    {
                        <span class="spinner-border spinner-border-sm"></span>
                    }
                    <span class="px-3">Submit</span>
                </button>
            </div>
        </EditForm>
    </div>
</div>

@code {
    private EditForm _editForm = new();
    private ValidationContext? _validationContext;

    internal ContactFormModel Model { get; private set; } = new();
    internal ValidationContext ValidationContext => _validationContext ??= new ValidationContext(Model);
    internal bool Loading { get; private set; } = false;
    internal bool ResetDisabled => Loading || _editForm.EditContext?.IsModified() != true;
    internal bool SubmitDisabled =>
    Loading
    || _editForm.EditContext?.IsModified() != true
    || !Validator.TryValidateObject(Model, ValidationContext, default, true);

    private void ResetForm()
    {
        if (ResetDisabled) return;

        Model = new();
        _validationContext = default;
        _editForm.EditContext?.MarkAsUnmodified();

        StateHasChanged();
    }

    private async Task HandleValidSubmit()
    {
        if (SubmitDisabled) return;

        Loading = true;

        StateHasChanged();

        await Task.Delay(2000);

        Console.WriteLine(Model);

        Loading = false;

        ResetForm();
    }
}