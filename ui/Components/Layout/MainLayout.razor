@inherits LayoutComponentBase
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@implements IDisposable
@attribute [ExcludeFromCodeCoverage]

<div class="app-container position-relative h-100 w-100 d-flex flex-column overflow-hidden">
    <div class="menu-container order-3 order-md-1 z-3 px-3 flex-shrink-0 bg-body-tertiary">
        <NavMenu CssClass="w-100 m-auto py-2"/>
    </div>

    <ErrorBoundary @ref="_errorBoundary">
        <ChildContent>
            <main class="order-2 z-1 px-3 flex-fill position-relative overflow-auto">
                <div class="main-inner-container w-100 m-auto py-2">
                    <div class="main-scroll-anchor"></div>
                    @Body
                </div>
            </main>
        </ChildContent>
        <ErrorContent>
            <main class="order-2 px-3 flex-fill position-relative overflow-auto">
                <div class="main-inner-container w-100 m-auto py-2">
                    <div class="main-scroll-anchor"></div>
                    <UniversalTitle Title="Error"/>
                    <GenericError>
                        <a href="@NavigationManager.Uri" class="btn btn-outline-primary btn-sm rounded-circle p-0 px-1"
                           title="Reload">
                            <i class="bi bi-arrow-clockwise"></i>
                        </a>
                    </GenericError>
                </div>
            </main>
        </ErrorContent>
    </ErrorBoundary>
</div>

@code {
    private ErrorBoundary? _errorBoundary;

    protected override void OnParametersSet() => _errorBoundary?.Recover();

    protected override void OnInitialized()
    {
        NavigationManager.LocationChanged += LocationChanged;
        base.OnInitialized();
    }

    private async void LocationChanged(object? sender, LocationChangedEventArgs e)
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("scrollMainToTop");
        }
        catch
        {
            // Ignore
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        try
        {
            await JsRuntime.InvokeVoidAsync("autoSetTheme");
        }
        catch
        {
            // Ignore
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public void Dispose() => NavigationManager.LocationChanged -= LocationChanged;
}
